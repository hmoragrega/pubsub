package pubsub

import (
	"context"
	"fmt"
)

// PublisherHandler handles events and generates new
// messages that will be published.
type PublisherHandler interface {
	HandleMessage(ctx context.Context, message *Message) ([]*Message, error)
}

// PublisherHandlerFunc that handles an event
type PublisherHandlerFunc func(ctx context.Context, message *Message) ([]*Message, error)

func (f PublisherHandlerFunc) HandleMessage(ctx context.Context, message *Message) ([]*Message, error) {
	return f(ctx, message)
}

type EnvelopePublisher interface {
	Publish(ctx context.Context, topic string, envelope Envelope) error
}

// Envelope holds the data that need to be transmitted.
type Envelope struct {
	ID         MessageID
	Name       string
	Key        string
	Body       []byte
	Version    string
	Attributes Attributes
}

// Publisher can publish a message to the
// appropriate publisher based on the topic.
type Publisher struct {
	Publisher  EnvelopePublisher
	Marshaller Marshaller
}

func (p *Publisher) Publish(ctx context.Context, topic string, message Message) error {
	body, version, err := p.Marshaller.Marshal(message.Data)
	if err != nil {
		return fmt.Errorf("marshaller error: %w", err)
	}

	id := message.ID
	if len(message.ID) == 0 {
		id = NewID()
	}

	return p.Publisher.Publish(ctx, topic, Envelope{
		ID:         id,
		Name:       message.Name,
		Key:        message.Key,
		Attributes: message.Attributes,
		Body:       body,
		Version:    version,
	})
}

// Handler is a helper that publishes messages generated by other handlers.
func (p *Publisher) Handler(topic string, handler PublisherHandler) Handler {
	return HandlerFunc(func(ctx context.Context, message *Message) error {
		messages, err := handler.HandleMessage(ctx, message)
		if err != nil {
			return err
		}
		for _, m := range messages {
			if err := p.Publish(ctx, topic, *m); err != nil {
				return err
			}
		}
		return nil
	})
}
